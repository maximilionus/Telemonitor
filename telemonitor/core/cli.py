import argparse

import colorama

from . import constants
from .. import __version__


def tm_colorama() -> colorama:
    """ Wrapper around colorama module with feature to disable the colored output

    Returns:
        colorama: Colorama module ready for use
    """
    from telemonitor.__main__ import args

    colorama_obj = colorama

    if args.disable_colored_output:
        # Overwrite all class variables with empty string to disable colored print
        for attr in ("Back", "Cursor", "Fore", "Style"):
            attr_dict = getattr(colorama_obj, attr).__dict__

            for k in attr_dict:
                attr_dict[k] = ""

    return colorama_obj


def cli_arguments_parser() -> object:
    """ Parse all startup arguments

    Returns:
        object: Namespace object, generated by `argparse` module
    """
    base_parser = argparse.ArgumentParser(add_help=False)
    global_group = base_parser.add_argument_group('global optional arguments')
    global_group.add_argument('-y', '--yes', action='store_true', dest='user_const_argreement', help='confirm all user-input related actions')
    global_group.add_argument('--no-color', action='store_true', dest='disable_colored_output', help='disable colored output (ANSI escape sequences)')

    argparser = argparse.ArgumentParser(
        prog=constants.STRS.name,
        description=constants.STRS.description,
        parents=[base_parser]
    )
    argparser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')

    bot_group = argparser.add_argument_group('bot control optional arguments')
    bot_group.add_argument('--token', action='store', type=str, dest='token_overwrite', metavar='STR', help='force the bot to run with token from the argument instead of the configuration file')
    bot_group.add_argument('--whitelist', action='store', type=int, dest='whitelist_overwrite', metavar='INT', nargs='+', help='force the bot to check whitelisted users from argument instead of the of the configuration file')

    adv_group = argparser.add_argument_group('advanced optional arguments')
    adv_group.add_argument('--dev', help='enable unstable development features', action='store_true', dest='dev_features')
    adv_group.add_argument('--verbose', '-v', help='write debug information to log file', action='store_true')
    adv_group.add_argument('--config-check', action='store_true', help='run config file initialization procedure and exit', dest='config_check_only')
    adv_group.add_argument('--no-config-check', action='store_true', help="don't scan configuration file on start", dest='disable_config_check')
    adv_group.add_argument('--no-logging', action='store_true', help='disable logging system', dest='disable_logging')

    subparsers = argparser.add_subparsers(dest='command')

    # Subparser for `systemd service` control cli
    systemd_service_parser = subparsers.add_parser('service', help="linux systemd telemonitor service control", parents=[base_parser])
    systemd_service_commands = systemd_service_parser.add_subparsers(dest='service_cli_command', metavar='command', required=True)
    systemd_service_commands.add_parser('install', help='install the service to system', parents=[base_parser])
    systemd_service_commands.add_parser('upgrade', help='upgrade installed service file (if any updates available)', parents=[base_parser])
    systemd_service_commands.add_parser('apply', help='apply changes from configuration file to service', parents=[base_parser])
    systemd_service_commands.add_parser('status', help='get status information of service', parents=[base_parser])
    systemd_service_commands.add_parser('remove', help='remove service from system', parents=[base_parser])

    return argparser.parse_args()


def print_action(text: str, *args, start="", action_status='ok'):
    """ Special function for printing the actions in standardized way

    Args:
        text (str): Text to print to the STDOUT
        start (str): Insert any text in the beginning of final string
        action_status (str): Color the output in color, that matches action status
            'ok'
            'error'
    """
    __colorama = tm_colorama()

    if action_status == 'ok':
        color_fg = __colorama.Fore.LIGHTCYAN_EX
    else:
        color_fg = __colorama.Fore.RED

    def __colored_print(text: str):
        print(start + color_fg + "\u25CF " + __colorama.Fore.RESET + text)

    __colored_print(text)

    if len(args) > 0:
        for text in args:
            __colored_print(text)


def ask_user_permission(ask_text: str) -> bool:
    """
    Create input and wait for user to agree or disagree.
    No input will be awaited if `CLI` parser will detect `user_const_argreement` var

    Args:
        ask_text (str): Confirmation message

    Returns:
        bool: Was action confirmed
    """
    from telemonitor.__main__ import args

    if args.user_const_argreement:
        return True

    __colorama = tm_colorama()
    input_action = input(f"{ask_text} {__colorama.Fore.GREEN}[y/n]{__colorama.Fore.RESET}: ")

    return True if input_action.lower() == 'y' else False


def handle_startup_args(args_namespace: object):
    """ Handle special arguments in startup script

    Args:
        args_namespace (object): Namespace with all arguments
    """
    if args_namespace.config_check_only: exit()

    from . import systemd_service

    if hasattr(args_namespace, 'service_cli_command'):
        systemd_service.cli(args_namespace.service_cli_command)
